#
# ~/.zsh_defaults
# {{@@ env['dotdrop_warning'] @@}}
#

# exports
if [ -f /usr/bin/screen ]; then
  export SYSSCREENRC=/etc/screenrc
fi

if [ -f ~/.pythonrc ]; then
  export PYTHONSTARTUP=~/.pythonrc
fi

# The following lines were added by compinstall

zstyle ':completion:*' completer _complete _ignored _approximate
zstyle :compinstall filename '~/.zshrc'

autoload -Uz compinit
compinit
# End of lines added by compinstall

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=10000000
SAVEHIST=10000000
HISTFILESIZE=1000000
#setopt appendhistory
setopt notify
unsetopt beep
bindkey -v
# End of lines configured by zsh-newuser-install

setopt extendedglob

# oh my zsh

# Path to your oh-my-zsh installation.
ZSH=/usr/share/oh-my-zsh/

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="bira_custom"
ZSH_THEME=""

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=~/.oh-my-zsh

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git python)

# User configuration
PATH="${PATH}:$(ruby -rubygems -e "puts Gem.user_dir")/bin"

# export MANPATH="/usr/local/man:$MANPATH"

# enable syntax highlight in less
if [[ -f /usr/bin/src-hilite-lesspipe.sh ]]; then
    export LESSOPEN="| /usr/bin/src-hilite-lesspipe.sh %s"
    export LESS=' -R '
fi

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nano'
else
  export EDITOR='nano'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

ZSH_CACHE_DIR=$HOME/.oh-my-zsh-cache
if [[ ! -d $ZSH_CACHE_DIR ]]; then
  mkdir $ZSH_CACHE_DIR
fi

source $ZSH/oh-my-zsh.sh

# Pure prompt
autoload -U promptinit; promptinit
# PURE_CMD_MAX_EXEC_TIME=5
if [[ $EUID -eq 0 ]]; then
    PURE_PROMPT_SYMBOL="#"
else
    PURE_PROMPT_SYMBOL="$"
fi
prompt pure

#aliases
if [[ $EUID -ne 0 ]]; then
    alias sudo='sudo ' # needed for using aliases with sudo
fi
alias ls='ls -h --color=auto --group-directories-first'
alias ll='ls -la'
alias mynload='nload -t 1000 -i 500 -o 100 -u K'
alias whereami='pwd'
alias nano='nano -cw'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias xkill='xkill -button 1'
alias home='cd ~/'
alias ..='cd ..'
alias gst='git status -u'
alias less='less -iMW'
alias amiinscreen='echo $STY'
alias fuck='sudo $(fc -ln -1)'
alias bpython='clear && bpython'
alias pa='pacaur'
alias radio='~/scripts/radio/radio.sh'
alias syncit='~/scripts/syncit/syncit.sh'
alias cal='cal -m'
alias dotdrop='eval $(cat ~/dotfiles/env.defaults ~/dotfiles/.env | grep -v "^#") ~/dotfiles/dotdrop.sh'
if which docker > /dev/null 2>&1; then
  alias docker-cleanup='docker rm -v $(docker ps -a -q -f status=exited) && docker rmi $(docker images -f "dangling=true" -q)'
  alias djoin='cont=$(docker ps --format="{{.ID}}" | head -n 1) && docker exec -it "$cont" bash'
fi
if which tremc > /dev/null 2>&1; then
    alias bt='tremc'
fi

# Magic
set_abbrevations() {
    typeset -Ag abbreviations
    abbreviations=(
      "Le"    "| less"
      "Eg"    "| egrep"
      "Ta"    "| tail"
      "Tl"    "tail -F"
      "So"    "| sort"
      "Cm"    "git commit -am \"__CURSOR__\""
      "Cml"   "${last_commit%?}__CURSOR__\""
      "Pu"    "${push_command}__CURSOR__"
    )
}

get_last_commit_cmd() {
    last_commit=$(fc -nlr 1 -1 | egrep -m 1 "^git commit")
    if ! [ -n "$last_commit" ]; then
        last_commit='git commit -am ""'
    fi
}

get_git_push_cmd() {
    if [ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1; then
        git_branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [ $? != 0 ]; then
            git_branch="master"
        fi
        push_command="git push origin $git_branch"
    else
        push_command='Pu '
    fi
}

magic-abbrev-expand() {
    get_last_commit_cmd
    get_git_push_cmd
    set_abbrevations
    local MATCH
    LBUFFER=${LBUFFER%%(#m)[_a-zA-Z0-9]#}
    command=${abbreviations[$MATCH]}
    LBUFFER+=${command:-$MATCH}

    if [[ "${command}" =~ "__CURSOR__" ]]
    then
        RBUFFER=${LBUFFER[(ws:__CURSOR__:)2]}
        LBUFFER=${LBUFFER[(ws:__CURSOR__:)1]}
    else
        zle self-insert
    fi
}

no-magic-abbrev-expand() {
  LBUFFER+=' '
}

zle -N magic-abbrev-expand
zle -N no-magic-abbrev-expand
bindkey " " magic-abbrev-expand
bindkey "^x " no-magic-abbrev-expand
bindkey -M isearch " " self-insert
